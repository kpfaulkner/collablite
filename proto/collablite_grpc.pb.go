// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: proto/collablite.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollabLiteClient is the client API for CollabLite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollabLiteClient interface {
	ProcessDocumentChanges(ctx context.Context, opts ...grpc.CallOption) (CollabLite_ProcessDocumentChangesClient, error)
	ImportDocument(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetDocument(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	ListDocuments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type collabLiteClient struct {
	cc grpc.ClientConnInterface
}

func NewCollabLiteClient(cc grpc.ClientConnInterface) CollabLiteClient {
	return &collabLiteClient{cc}
}

func (c *collabLiteClient) ProcessDocumentChanges(ctx context.Context, opts ...grpc.CallOption) (CollabLite_ProcessDocumentChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollabLite_ServiceDesc.Streams[0], "/collabproto.CollabLite/ProcessDocumentChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &collabLiteProcessDocumentChangesClient{stream}
	return x, nil
}

type CollabLite_ProcessDocumentChangesClient interface {
	Send(*DocChange) error
	Recv() (*DocConfirmation, error)
	grpc.ClientStream
}

type collabLiteProcessDocumentChangesClient struct {
	grpc.ClientStream
}

func (x *collabLiteProcessDocumentChangesClient) Send(m *DocChange) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collabLiteProcessDocumentChangesClient) Recv() (*DocConfirmation, error) {
	m := new(DocConfirmation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collabLiteClient) ImportDocument(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/collabproto.CollabLite/ImportDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collabLiteClient) GetDocument(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/collabproto.CollabLite/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collabLiteClient) ListDocuments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/collabproto.CollabLite/ListDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollabLiteServer is the server API for CollabLite service.
// All implementations must embed UnimplementedCollabLiteServer
// for forward compatibility
type CollabLiteServer interface {
	ProcessDocumentChanges(CollabLite_ProcessDocumentChangesServer) error
	ImportDocument(context.Context, *ImportRequest) (*StatusResponse, error)
	GetDocument(context.Context, *GetRequest) (*GetResponse, error)
	ListDocuments(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedCollabLiteServer()
}

// UnimplementedCollabLiteServer must be embedded to have forward compatible implementations.
type UnimplementedCollabLiteServer struct {
}

func (UnimplementedCollabLiteServer) ProcessDocumentChanges(CollabLite_ProcessDocumentChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessDocumentChanges not implemented")
}
func (UnimplementedCollabLiteServer) ImportDocument(context.Context, *ImportRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDocument not implemented")
}
func (UnimplementedCollabLiteServer) GetDocument(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedCollabLiteServer) ListDocuments(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedCollabLiteServer) mustEmbedUnimplementedCollabLiteServer() {}

// UnsafeCollabLiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollabLiteServer will
// result in compilation errors.
type UnsafeCollabLiteServer interface {
	mustEmbedUnimplementedCollabLiteServer()
}

func RegisterCollabLiteServer(s grpc.ServiceRegistrar, srv CollabLiteServer) {
	s.RegisterService(&CollabLite_ServiceDesc, srv)
}

func _CollabLite_ProcessDocumentChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollabLiteServer).ProcessDocumentChanges(&collabLiteProcessDocumentChangesServer{stream})
}

type CollabLite_ProcessDocumentChangesServer interface {
	Send(*DocConfirmation) error
	Recv() (*DocChange, error)
	grpc.ServerStream
}

type collabLiteProcessDocumentChangesServer struct {
	grpc.ServerStream
}

func (x *collabLiteProcessDocumentChangesServer) Send(m *DocConfirmation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collabLiteProcessDocumentChangesServer) Recv() (*DocChange, error) {
	m := new(DocChange)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CollabLite_ImportDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabLiteServer).ImportDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collabproto.CollabLite/ImportDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabLiteServer).ImportDocument(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollabLite_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabLiteServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collabproto.CollabLite/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabLiteServer).GetDocument(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollabLite_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabLiteServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collabproto.CollabLite/ListDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabLiteServer).ListDocuments(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollabLite_ServiceDesc is the grpc.ServiceDesc for CollabLite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollabLite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collabproto.CollabLite",
	HandlerType: (*CollabLiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportDocument",
			Handler:    _CollabLite_ImportDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _CollabLite_GetDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _CollabLite_ListDocuments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessDocumentChanges",
			Handler:       _CollabLite_ProcessDocumentChanges_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/collablite.proto",
}
